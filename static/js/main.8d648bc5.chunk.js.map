{"version":3,"sources":["components/Form/BlurInput.tsx","components/Form/SizeInput.tsx","utils.ts","components/Form/ImageIcon.tsx","components/Form/Form.tsx","App.tsx","index.tsx"],"names":["BlurInput","updateForm","useState","blurValue","setBlurValue","useEffect","w","spacing","step","min","max","value","onChange","bg","hasArrow","label","placement","color","isOpen","SizeInput","size","setSize","showCustom","setShowCustom","width","setWidth","height","setHeight","e","sizeId","id","parseInt","sizeMap","Map","get","handleChange","target","focusBorderColor","prev","fetchRandomImage","blur","grayscale","a","fetch","then","res","status","Error","ImageIcon","viewBox","d","fill","Form","imageSource","setImageSource","setBlur","isGrayscale","setIsGrayscale","isLoading","setIsLoading","fetchImage","url","h","padding","isLoaded","startColor","endColor","speed","src","alt","checked","leftIcon","onClick","theme","extendTheme","colors","brand","primary","primarydark","secondary","faded","background","fonts","body","App","alignItems","justifyContent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d648bc5.chunk.js","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\nimport {\r\n  Slider,\r\n  SliderTrack,\r\n  SliderFilledTrack,\r\n  SliderThumb,\r\n  Tooltip,\r\n  HStack,\r\n} from \"@chakra-ui/react\"\r\n\r\ninterface BlurProps {\r\n  updateForm: Dispatch<SetStateAction<number>>;\r\n}\r\n\r\nconst BlurInput = ({updateForm} : BlurProps) => {\r\n  const [blurValue, setBlurValue] = useState(0)\r\n\r\n  useEffect(() => {\r\n    updateForm(blurValue)\r\n  },[blurValue])\r\n\r\n  const min = 0\r\n  const max = 10\r\n  \r\n  return (\r\n    <>\r\n      <HStack w={\"100%\"} spacing=\"10px\">\r\n        <b>Blur</b>\r\n        <p>{min}</p>\r\n        <Slider step={1} min={min} max={max} value={blurValue} onChange={value => setBlurValue(value)}>\r\n          <SliderTrack bg=\"brand.faded\">\r\n            <SliderFilledTrack bg=\"brand.primary\"/>\r\n          </SliderTrack>\r\n          <Tooltip hasArrow label={blurValue} placement=\"top\" bg=\"brand.secondary\" color=\"white\" isOpen>\r\n            <SliderThumb bg=\"brand.secondary\" />\r\n          </Tooltip>\r\n        </Slider>\r\n        <p>{max}</p>\r\n      </HStack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BlurInput;\r\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react';\r\nimport { NumberInput, NumberInputField, Select} from '@chakra-ui/react';\r\n\r\ninterface SizeInputProps {\r\n  updateForm: Dispatch<SetStateAction<number[]>>;\r\n}\r\n\r\nconst SizeInput = ({ updateForm }: SizeInputProps) => {\r\n  const [size, setSize] = useState([854, 480]);\r\n  const [showCustom, setShowCustom] = useState<Boolean>(false);\r\n  const [width, setWidth] = useState(123);\r\n  const [height, setHeight] = useState(123);\r\n\r\n  useEffect(() => {\r\n    updateForm(size);\r\n  }, [size]);\r\n\r\n  function handleChange(sizeId: string) {\r\n    const id = parseInt(sizeId);\r\n    if (parseInt(sizeId) === 5) {\r\n      setShowCustom(true);\r\n      setSize([width, height]);\r\n    } else {\r\n      setShowCustom(false);\r\n      const sizeMap = new Map([\r\n        [1, [150, 150]],\r\n        [2, [854, 480]],\r\n        [3, [1366, 768]],\r\n        [4, [1920, 1080]],\r\n      ]);\r\n      setSize(sizeMap.get(id) || [123, 123]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Select onChange={(e) => handleChange(e.target.value)} bg=\"brand.primary\" >\r\n        Size\r\n        <option value={1}>Thumbnail - 150 x 150 pixels</option>\r\n        <option value={2}>Small 854 x 480 pixels</option>\r\n        <option value={3}>Medium 1366 x 768 pixels</option>\r\n        <option value={4}>Large 1920 x 1080 pixels</option>\r\n        <option value={5}>Custom</option>\r\n      </Select>\r\n      {showCustom && (\r\n        <>\r\n          <NumberInput\r\n            focusBorderColor=\"brand.primary\"\r\n            value={width}\r\n            onChange={(value) => {\r\n              setSize((prev) => [parseInt(value), prev[1]]);\r\n              setWidth(parseInt(value));\r\n            }}\r\n          >\r\n            Width\r\n            <NumberInputField />\r\n          </NumberInput>\r\n          \r\n          <NumberInput\r\n            focusBorderColor=\"brand.primary\"\r\n            value={height}\r\n            onChange={(value) => {\r\n              setSize((prev) => [prev[0], parseInt(value)]);\r\n              setHeight(parseInt(value));\r\n            }}\r\n          >\r\n            Height\r\n            <NumberInputField />\r\n          </NumberInput>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SizeInput;\r\n","import { Image } from \"./types\";\r\n\r\n/**\r\n * Returns a randome image based based on given parameters from https://picsum.photos\r\n * @param pokemonId name or number\r\n * @returns PokÃ©mon\r\n */\r\n export const fetchRandomImage = async (width: number, height: number, blur: number, grayscale: boolean) =>\r\n fetch(`https://picsum.photos/${width}/${height}${grayscale ? \"?grayscale&\" : \"/?\"}${blur && \"blur=\"+blur}`).then<Image>(\r\n   (res) => {\r\n     const expectedResponseCode = 200;\r\n     if (res.status === expectedResponseCode) {\r\n       return res;\r\n     }\r\n     throw new Error(\r\n       `Got HTTP status code ${res.status}, when HTTP status code ${expectedResponseCode} was expected`\r\n     );\r\n   }\r\n );","import { Icon } from '@chakra-ui/react';\r\n\r\nconst ImageIcon = () => (\r\n  <Icon width=\"21\" viewBox=\"0 0 21 21\" color=\"primary\">\r\n    <path\r\n      d=\"M20.625 18.375V2.625C20.625 1.3875 19.6125 0.375 18.375 0.375H2.625C1.3875 0.375 0.375 1.3875 0.375 2.625V18.375C0.375 19.6125 1.3875 20.625 2.625 20.625H18.375C19.6125 20.625 20.625 19.6125 20.625 18.375ZM6.5625 12.1875L9.375 15.5738L13.3125 10.5L18.375 17.25H2.625L6.5625 12.1875Z\"\r\n      fill=\"#112A09\"\r\n    />\r\n  </Icon>\r\n);\r\n\r\nexport default ImageIcon","import BlurInput from \"./BlurInput\";\r\nimport SizeInput from \"./SizeInput\";\r\nimport { useEffect, useState } from 'react';\r\nimport { fetchRandomImage } from '../../utils';\r\nimport { Button, VStack, Checkbox, Spinner, Skeleton, Image} from \"@chakra-ui/react\";\r\nimport ImageIcon from '../Form/ImageIcon'\r\n\r\n  const Form = () => {\r\n      const [imageSource, setImageSource] = useState(\"\")\r\n      const [blur, setBlur] = useState(0);\r\n      const [size, setSize] = useState<number[]>([100,100])\r\n      const [isGrayscale, setIsGrayscale] = useState(false)\r\n      const [isLoading, setIsLoading] = useState(false)\r\n\r\n      useEffect(() => {\r\n        fetchImage()\r\n      },[])\r\n\r\n      const fetchImage = () => {\r\n        setIsLoading(true)\r\n        fetchRandomImage(size[0], size[1], blur, isGrayscale).then(res => {\r\n          setImageSource(res.url)\r\n          setIsLoading(false)\r\n        })\r\n      }\r\n\r\n      return (\r\n        <VStack spacing=\"2em\" h=\"100%\" w={[\"100%\", \"70%\", \"50%\", \"50%\"]} padding=\"20px\">\r\n            <Skeleton isLoaded={!isLoading} startColor=\"brand.primary\" endColor=\"brand.secondary\" speed={2}>\r\n              <Image src={imageSource} alt=\"Picsum\"/>\r\n            </Skeleton>\r\n            <SizeInput updateForm={setSize} />\r\n            <BlurInput updateForm={setBlur} />\r\n            <Checkbox onChange={e => setIsGrayscale(e.target.checked)}><b>Grayscale</b></Checkbox>\r\n            <Button color=\"brand.secondary\" leftIcon={isLoading? <Spinner /> : <ImageIcon/>} bg=\"brand.primary\" onClick={() => fetchImage()}>\r\n               GET NEW IMAGE\r\n            </Button>\r\n        </VStack>\r\n      );\r\n    };\r\n    \r\n  export default Form","import { ChakraProvider, extendTheme } from '@chakra-ui/react';\r\nimport Form from './components/Form/Form';\r\nimport { Flex } from '@chakra-ui/react';\r\n\r\nconst theme = extendTheme({\r\n  colors: {\r\n    brand: {\r\n      primary: '#C4EE4D',\r\n      primarydark: '#9BBD3B',\r\n      secondary: '#375418',\r\n      faded: '#ABB493',\r\n      background: '#111407'\r\n    },\r\n  },\r\n  fonts: {\r\n    body: 'Source Sans Pro',\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <Flex h=\"100%\" alignItems=\"center\" justifyContent=\"center\">\r\n      <ChakraProvider theme={theme}>\r\n        <Form />\r\n      </ChakraProvider>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}